面向对象程序设计基于三个基本概念：数据抽象、继承和动态绑定
数据抽象 类的接口与实现分离
继承 定义相似的类型并对其想死关系建模
动态绑定 在一定程度上忽略相似类型的区别，以统一的方式使用它们的对象

class Noderived final {/*...*/} //不允许被继承

OOP的核心思想是多态性(polymorphism)

当我们想要访问某个类的成员或者函数，无论私有，使用using 类名::成员名(函数名)

使用虚析构函数能够确保执行正确的析构函数版本
否则delete一个指向派生类对象的基类指针将产生未定义的行为

利用容器存储继承类 使用(智能)指针 而非 对象
可以把派生类的智能指针转换成基类的智能指针
