(15.1)
虚函数：基类希望派生类进行覆盖的函数
(15.2)
派生类可以继承定义在基类的成员，但是派生类的函数不一定有权访问基类继承而来的成员。
派生类可以访问公有成员，不能访问私有成员。
定义受保护的成员使得派生类可以访问，而其他用户禁止访问
(15.3)
(15.4)
派生类的声明只需要包含类名即可，若想将某个类用作基类，则该类必须已经定义
a>不可以继承自己
b>正确声明且定义
c>仅声明的话，只需要类名即可
(15.5)
(15.6)
(15.7)
(15.8)
静态类型，编译时总是已知的，它是变量声明时的类型或表达式生成的类型
动态类型，是变量或表达式表示的内存中的对象的类型，直到运行时才可知

如果表达式既不是引用也不是指针，则它的动态类型永远与静态类型一致。
基类的指针或引用的静态类型可能与其动态类型不一致。

一个基类的对象可能是派生类对象的一部分，也可能不是，所以不存在从基类向派生类的自动类型转换
可以通过dynamic_cast 或 static_cast 进行类型转换
(15.9)
eg.
Bulk_Quote bulk;
Quote *itemP = &bulk; //itemP 动态类型是Bulk_Quote
(15.10)
ifstream类和istringstream都继承自istream类(cin)。
ofstream类和ostringstream都继承自ostream类(cout)。
read函数接受istream类的引用，所以发生了派生类向基类的类型转换。
(15.11)
(15.12)
override表示改派生类的此函数为虚函数，每个派生类都需要定义
final表示函数不可被覆写，不允许该类的派生类定义
如果不允许该派生类的派生类覆写改函数，则有必要
(15.13)
base::print(ostream& os) 输出base的basename
derived::print(ostream& os) 调用base::print，然后输出derived的i
应该把print(os);改成 base::print(os);
(15.14)
a> base::print
b> derived::print
c> base::name
d> base::name
e> base::print
f> derived::print
(15.15)
(15.16)
(15.17)
cannot declare variable ‘dq’ to be of abstract type ‘Disc_quote’
(15.18)
只有公有地继承，用户代码才能使用派生类向基类的转换。
Base *p = &d1;  //合法
p = &d2;    //不合法
p = &d3;    //不合法
p = &dd1;   //合法
p = &dd2;   //不合法
p = &dd3;   //不合法
(15.19)
不论什么方式继承，派生类的成员函数和友元都能使用派生类向基类的转换。
如果D继承B的方式是私有的，则D的派生类的成员和友元不能使用类型转换。
所以除了类Derived_from_Private不合法外，其他都合法
(15.20)
18:
inherit.cpp:100:7: error: ‘base’ is an inaccessible base of ‘priv_derv’
p = &d2;
  ^
inherit.cpp:101:7: error: ‘base’ is an inaccessible base of ‘prot_derv’
p = &d3;
  ^
inherit.cpp:103:7: error: ‘base’ is an inaccessible base of ‘pub_priv_derv’
p = &dd2;
  ^
inherit.cpp:104:7: error: ‘base’ is an inaccessible base of ‘pub_prot_derv’
p = &dd3;
  ^
19:
inherit.cpp:86:17: error: within this context
void memfcn(base &b) {b = *this;}
            ^
inherit.cpp: In member function ‘void pub_priv_derv::memfcn(base&)’:
inherit.cpp:86:29: error: ‘base’ is an inaccessible base of ‘pub_priv_derv’
void memfcn(base &b) {b = *this;}
                        ^
(15.21)
(15.22)
(15.23)
虚函数将在运行时确定使用虚函数的哪个版本，判断的依据是该指针所绑定对象的真实类型。
非虚函数不会发生动态绑定，实际调用的函数版本由指针的静态类型决定。
int fcn() override { }
bp2->fcn();将调用D1::fcn()
(15.24)
如果基类的析构函数不是虚函数，则delete一个指向派生类对象的基类指针则只会调用基类的析构函数
如果基类的析构函数是虚函数，则会先调用派生类的析构函数然后调用基类的析构函数
(15.25)
合成的Bulk_quote默认构造函数运行Disc_quote的默认构造函数，后者又运行Quote的默认构造函数
Quote的构造函数完成后，继续执行Disc_quote的构造函数，然后执行Bulk_quote的构造函数
如果去掉Disc_quote的构造函数，则无法对Bulk_quote进行默认初始化
(15.26)
(15.27)
using Disc_quote::Disc_quote;
(15.28)
(15.29)
(15.30)
(15.31)
a> WordQuery*3, OrQuery*1, AndQuery*1, NotQuery*1
b> WordQuery*3, OrQuery*1, AndQuery*1, NotQuery*1
c> WordQuery*4, AndQuery*2, OrQuery*1
(15.32)
拷贝:
调用合成的拷贝构造函数。在本例中，数据成员是一个共享指针，所以在拷贝时，共享指针指向相同的地址并且使用计数+1。
移动:
调用合成的移动构造函数。在本例中，共享指针指向原始共享指针指向的地址。移动操作后，新对象中共享指针的使用计数为1，原始对象的指针变成了nullptr。
赋值:
调用合成的赋值构造函数，和拷贝构造函数类似。
销毁:
调用合成析构函数。使用次数-1。如果计数变为零，将删除智能指针所指向的资源。
(15.33)
Query_base是一个抽象基类，不允许直接声明其对象。
(15.34)
Query q = Query("fiery") & Query("bird") | Query("wind");
a>
WordQuery::WordQuery(wind)
Query::Query(const std::string& s) where s=wind
WordQuery::WordQuery(bird)
Query::Query(const std::string& s) where s=bird
WordQuery::WordQuery(fiery)
Query::Query(const std::string& s) where s=fiery
BinaryQuery::BinaryQuery()  where s=&
AndQuery::AndQuery()
Query::Query(std::shared_ptr<Query_base> query)
BinaryQuery::BinaryQuery()  where s=|
OrQuery::OrQuery
Query::Query(std::shared_ptr<Query_base> query)
b>
Query::rep()
BinaryQuery::rep()
Query::rep()
WordQuery::rep()
Query::rep()
BinaryQuery::rep()
Query::rep()
WordQuery::rep()
Query::rep()
WordQuery::rep()
c>
Query::eval()
OrQuery::eval()
Query::eval()
WordQuery::eval()
Query::eval()
AndQuery::eval()
Query::eval()
WordQuery::eval()
Query::eval()
WordQuery::eval()
BinaryQuery::rep()
Query::rep()
WordQuery::rep()
Query::rep()
WordQuery::rep()
BinaryQuery::rep()
Query::rep()
WordQuery::rep()
Query::rep()
BinaryQuery::rep()
Query::rep()
WordQuery::rep()
Query::rep()
WordQuery::rep()
(15.35)
(15.36)
(15.37)
(15.38)
1>不合法，BinaryQuery是抽象类
2>不合法，&返回Query类，AndQuery不能转换到Query类
3>不合法，同上
(15.39)
(15.40)
不会rhs空集则返回lhs的结果，lhs空集则返回rhs的结果，两个都是空集则返回空结果
(15.41)
(15.42)
