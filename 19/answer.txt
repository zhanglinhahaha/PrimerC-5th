(19.1)
void *operator new(size_t size) {
    std::cout << "new\n";
    if(void *mem = malloc(size)) {
        return mem;
    }else {
        throw std::bad_alloc();
    }
}
void operator delete(void *mem) noexcept {
    std::cout << "delete\n";
    std::free(mem);
}
(19.2)
重写的函数需要定义在全局中, 如果定义在 StrVec 类中, allocator 将无法访问到.
(19.3)
a> 编译成功, 动态转换成功, 将指针 pa 转换成 B 的指针.
b> 编译成功, 动态转换失败, 指针 pb 无法转换成 C 的指针.
c> 编译失败, D 会创建两个 A 的部分, 会造成二义性.
(19.4)
见程序代码
(19.5)
当无法使用虚函数时, 选择想要的函数版本.
例如,实现具有继承关系的类型去实现相等运算符
class Base {
    friend bool operator==(const Base& lhs, const Base& rhs);
public:
protected:
    virtual bool equal(const Base&) const;
};
class Derived : public Base {
public:
protected:
    bool equal(const Base&) const;
};
bool operator==(const Base& lhs, const Base& rhs){
    return typeid(lhs) == typeid(rhs) && lhs.equal(rhs);
}
bool Base::equal(const Base& rhs) const {
    //执行相等操作
}
bool Derived::equal(const Base& rhs) const {
    auto r = dynamic_cast<const Derived&> (rhs);
    //执行相等操作
}
(19.6)
ifstream fin;
fin.open("test.txt");
TextQuery tq(fin);
std::string s1 = "fiery", s2 = "bird";
Query_base::setDebug(false);

Query q1(s1), q2(s2);
AndQuery aq(q1, q2);

// 19.6
Query_base* qb = &aq;
if(AndQuery* aqt = dynamic_cast<AndQuery*> (qb)) {
    print(cout, aqt->eval(tq));
}else {
    cout << "dynamic_cast error\n";
}
(19.7)
// 19.7
Query_base& p = aq;
try{
    AndQuery& ap = dynamic_cast<AndQuery&>(p);
    print(cout, ap.eval(tq));
}
catch (bad_cast){
    cout << "dynamic_cast error\n";
}
(19.8)
// 19.8
cout << (typeid(*qb) == typeid(p)) << " " << (typeid(*qb) == typeid(AndQuery)) << endl;
(19.9)
(19.10)
(19.11)
在声明成员指针时用 * 表示当前声明的名字是一个指针.
成员指针必须包含成员所属的类.
(19.12)
(19.13)
const std::string Sales_data::*bookNo;
(19.14)
auto pmf = &Screen::get_cursor; -> 合法
pmf 是一个指针,他可以指向Screen的某个常量成员函数.前提是该函数不接受任何实参,且返回一个char.
pmf = &Screen::get; -> 不合法,Screen::get有两个实参.应修改为:
char (Screen::*pmf2)(Screen::pos, Screen::pos) const;
pmf2 = &Screen::get;
(19.15)
和普通函数指针不同的是,成员函数和指向改成员的指针直接不存在自动转换规则.
(19.16)
using Action = double(Sales_data::*)()const;
(19.17)
using Action = char (Screen::*)(Screen::pos, Screen::pos) const;
(19.18)
(19.19)
(19.20)
#ifndef _TEXTQUERY_H_
#define _TEXTQUERY_H_
//#include "QueryResult.h"
#include <fstream>
#include <sstream>
#include <iostream>
#include <vector>
#include <string>
#include <memory>
#include <map>
#include <set>

using namespace std;
typedef vector<string>::size_type line_no;

class TextQuery {
public:
	class QueryResult;
    TextQuery(ifstream&);
    QueryResult query(const std::string &) const;
private:
    shared_ptr<vector<string>> file;
    map<string, shared_ptr<set<line_no>>> wm;
};

class TextQuery::QueryResult {
friend std::ostream& print(std::ostream&, const QueryResult&);
public:
    QueryResult(string s, shared_ptr<set<line_no>> p,
        shared_ptr<vector<string>> f):
        sought(s), lines(p), file(f){ }
    const shared_ptr<vector<string>> get_file() const{return file;}
    std::set<line_no>::iterator
    begin(){ return lines->begin();}
    std::set<line_no>::iterator
    end(){ return lines->end();}
private:
    string sought;
    shared_ptr<set<line_no>> lines;
    shared_ptr<vector<string>> file;
};

std::ostream &print(ostream & os, const TextQuery::QueryResult &qr) {
    os << qr.sought << " occurs " << qr.lines->size() << " "
       << (((qr.lines->size()) > 1)? " times " : " time ") << endl;
    for(auto num : *qr.lines) {
        os << "\t(line " << num + 1 << ") "
           << *(qr.file->begin() + num) << endl;
    }
    return os;
}


TextQuery::TextQuery(ifstream &is) : file(new vector<string>) {
    string text;
    while(getline(is, text)) {
        file->push_back(text);
        int n = file->size() - 1;
        istringstream line(text);
        string word;
        while(line >> word) {
            auto &lines = wm[word];
            if(!lines)
                lines.reset(new set<line_no>);
            lines->insert(n);
        }
    }
}

TextQuery::QueryResult TextQuery::query(const string &sought) const {
    static shared_ptr<set<line_no>> nodata(new set<line_no>);
    auto loc = wm.find(sought);
    if(loc == wm.end())
        return TextQuery::QueryResult(sought, nodata, file);
    else
        return TextQuery::QueryResult(sought, loc->second, file);
}
#endif // _TEXTQUERY_H_
(19.21)
(19.22)
和 string 一样, 该构造的时候构造,该析构的时候析构.
(19.23)
(19.24)
(19.25)
(19.26)
如果都声明成extern "C", 会报下面的错误
error: conflicting declaration of C function ‘double t26::compute(double*, double)’
 extern "C" double compute(double *, double);
