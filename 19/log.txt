控制内存分配
new
1 new表达式调用一个名为operator new(operator new[])的标准库函数
该函数将会分配一块足够大的原始的未命名的内存空间来存储
2 编译器运行相应的构造函数以构造这些对象，并为其传入初始值
3 对象被分配了空间并构造完成，返回一个指向该对象的指针
delete
1 对所指的类型执行对应的析构函数
2 编译器调用operator delete(operator delete[])的标准库函数释放内存空间
重载new和delete 实质上就是调用malloc和free
malloc函数与free函数
<cstdlib>
malloc函数接受一个表示待分配字节数的size_t，返回指向分配空间的指针或者返回0以表示分配失败
free函数接受一个void*，它是malloc返回的指针的副本，free将相关内存返回给系统

运行时类型识别
typeid 运算符 返回表达式的类型
typeid(e);//一般用来判断两个类型是否相等
dynamic_cast 运算符 将基类的指针或引用安全的转换成派生类的指针或引用
dynamic_cast<type*>(e)//有效的指针
dynamic_cast<type&>(e)//左值
dynamic_cast<type&&>(e)//不能是左值
type必须是一个类类型，通常情况下该类型都应该含有虚函数
e必须符合下面三个条件之一
e的类型是目标type的公有派生类
e的类型是目标type的公有基类
e的类型就是目标type的类型
如果dynamic_cast语句的转换目标是指针类型并且失败了，则结果为0
eg.
//bp是Base类的指针，Derived是Base的公有派生类
if(Derived *dp = dynamic_cast<Derived*>(bp)) { }
else { }
如果转换目标是引用类型并且失败了，则抛出一个bad_cast异常
eg.
void f(const Base &b) {
    try {
        const Derived &d = dynamic_cast<const Derived&>(b);
    } catch (bad_cast) { }
}

枚举类型
enum class open_mode {input, output, append};
enum color {red, green, blue};
enum {floatPrec = 6, doublePrec = 10, double_doublePrec = 10};
//加class会限定作用域，不限定作用域的枚举类型的对象或成员会自动地转换成整型
open_mode om = open_mode::input;
int i = color::red;
//会指定enum中使用的类型，默认为int
enum value : unsigned long long { ... };

类成员指针
数据成员指针
//声明一个指向Screen类的const string成员的指针
const string Screen::*pdata;
pdata = &Screen::contents;
//等价于
auto pdata = &Screen::contents;
Screen myScreen, *pScreen = &myScreen;
auto s = myScreen.*pdata;//.*解引用pdata以获得pScreen对象的contents成员
s = pScreen->*pdata;//->*解引用pdata以获得pScreen所指对象的contents成员
成员函数指针
//pmf是一个指针，指向Screen的某个常量成员函数，该函数不接受任何实参，且返回一个char
auto pmf = &Screen::get_cursor;
char (Screen::*pmf2)(Screen::pos, Screen::pos) const;
pmf2 = &Screen::get;
Screen myScreen, *pScreen = &myScreen;
char c1 = (pScreen->*pmf)();
char c2 = (myScreen.*pmf2)(0, 0);
//类型别名
using Action = char (Screen::*)(Screen::pos, Screen::pos) const;
Action get = &Screen::get;
//将成员函数用作可调用对象
1 function<bool (const string&)> func = &string::empty;
2 auto func1 = mem_fn(&string::empty);
3 auto func2 = bind(&string::empty, _1);

嵌套类
嵌套类必须声明在类的内部，可以在内部或者外部定义
在外部定义时，必须以外层类的名字限定嵌套类的名字
定义嵌套类构造函数，需指明嵌套类是在外层类的作用域之内的
嵌套类的静态成员需定义在外层类作用域之外，且要指明

union
可以有多个数据成员，但在任意时刻只有一个数据成员可以有值
当给union的某个成员赋值之后，其他成员就变成未定义
分配给union对象的存储空间为最大的数据成员
union不能含有引用类型的成员
默认情况，成员都是公有的
定义:
union Token {
    char cval;
    int ival;
    double dval;
};
//匿名union
//在它定义所在的作用域该union的成员都是可以直接访问的，只能有公有成员，不能定义成员函数
union {
    char cval;
    int ival;
    double dval;
};

局部类
定义在函数的内部，该类型只在定义它的作用域可见，不允许声明静态数据成员
局部类只能访问外层作用域定义的类型名、静态变量已经枚举成员

不可移植的特性

位域
将非静态数据成员定义为位域，一个位域中含有一定数量的二进制位
位域的类型必须是整型或枚举类型
typedef unsigned int Bit;//通常将位域设为无符号类型
class File {
    Bit mode: 2; //占两个二进制位
    Bit modified: 1;
    Bit prot_owner: 3;
    Bit prot_group: 3;
    Bit prot_world: 3;
public:
    enum modes { READ = 01, WRITE = 02, EXECUTE = 03 };
    File &open(modes);
    void close();
    void write();
    void isRead() const;
    void setWrite();
};
void File::write() {
    modified = 1;
    //...
}
void File::close() {
    if(modified)
        //...保存内容
}
File &File::open(File::modes m) {
    mode |= READ;
    if(m & WRITE)
    return *this;
}
inline bool File::isRead() const { return mode & READ; }
inline void File::setWrite() { mode |= WRITE; }

volatile限定符
易变的 不可优化 顺序性
当对象的值可能在程序的控制或检测之外被改变时，使用volatile
与const用法很相似，对类型额外修饰

extern "C"
指出任意非C++函数所用的语言
必须出现在函数的每个声明中
支持其他语言的链接指示 extern "Ada"、extern "FORTRAN"

extern "C" void (*pf)(int);//pf指向的函数为一个C函数
如过一组重载函数中有一个是C函数，其余的必定都是C++函数，因为C语言不支持函数重载


