模板与泛型编程
定义一个函数模板，用来生成针对特定类型的函数版本
eg.
template <typename T>
int compare(const T &v1, const T &v2) {
    if(v1 < v2) return -1;
    if(v2 > v1) return 1;
    return 0;
}

template <typename T>
T foo(T *p) {
    T tmp = *p;
    //...
    return tmp;
}

template <typename T, class U>
calc (const T&, const U&);//typename和class没有什么区别，但是必须存在

模板程序应该尽量减少对实参类型的要求

类模板
template <typename T> class Blob {
public:
    typedef T value_type;
    typedef typename std::vector<T>::size_type size_type;
    Blob();
    Blob(std::initializer_list<T> il);
    size_type size() const { return data->size();}
    bool empty() const { return data->empty();}
    void push_back(const T &t) { data->push_back(t);}
    void push_back(T &&t) { data-push_back(std::move(t));}
    void pop_back();
    T& back();
    T& operator[](size_type i);
private:
    std::shared_ptr<std::vector<T>> data;
    void check(size_type i, const std::string &msg) const;
};
eg.
Blob<int> ia;
Blob<string> names;
Blob<double> prices;

template <typename T> void Blob<T>::check(size_type i, const std::string &msg) const {
    if(i >= data->size())
        throw std::out_of_range(msg);
}

在一个类模板的作用域内，可以直接使用模板名而不必指定模板实参

模板类型别名
template<typename T> using twin = pair<T, T>;
twin<string> authors;

模板参数会隐藏外层作用域中声明的相同名字，在模板内不能重用模板参数名。
模板声明必须包含模板参数，声明中的模板参数的名字不必与定义中相同

显式实例化形式
extern template declaration;//实例化声明
template declaration;//实例化定义
eg.
extern template class Blob<string>;//声明
template int compare(const int&, const int&);//定义

可变参数模板
template <typename T, typename... Args> void foo(const T &t, const Args& ... rest);
eg.
template <typename T> ostream &print(ostream &os, const T &t) {
    return os << t;//终止递归打印最后一个实参
}
template <typename T, typename... Args>
ostream &print(ostream &os, const T &t, const Args& ... rest) {
    os << t << ",";
    return print(os, rest...);//递归调用
}
