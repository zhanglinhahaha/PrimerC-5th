(10.1)
(10.2)
(10.3)
(10.4)
用0的话，则表明结果将会删除小数位。
所以最好是要设置小数位
(10.5)
equal是利用是使用==比较两个元素。
string重载了==，可以比较两个字符串是否等长且其中对应元素相等。
而C风格字符串本质是char*类型，用==比较两个char*对象，只会检查两个指针值是否相等，也就是地址是否相等。
所以即使字符串完全相等，但是地址不同，equal也会返回false。
(10.6)
(10.7)
(10.8)
标准库算法不直接操作容器，而是通过操作迭代器间接访问容器。是否能插入删除元素，取决于传递给这些算法的迭代器是否具有这样的能力。
(10.9)
(10.10)
做到算法和数据结构的分离。
算法不操作具体的容器，只操作迭代器，然后由迭代器实现对容器的访问。
这样做的目的就是实现算法的通用性。
(10.11)
(10.12)
(10.13)
(10.14)
(10.15)
(10.16)
(10.17)
(10.18)
(10.19)
(10.20)
(10.21)
(10.22)
(10.23)
bind接受的参数与它绑定的函数相关，函数接受n个参数，则bind接受n+1个参数
(10.24)
(10.25)
(10.26)
back_inserter 创建一个使用push_back的迭代器
front_inserter 穿件一个使用push_front的迭代器
inserter 创建一个使用insert的迭代器，此函数接受第二个参数，这个参数必须是一个指向给定容器的迭代器。元素将被插入到给定迭代器所表示的元素之前。
在使用back_inserter和front_inserter的时候要确保容器支持push_back和push_front。
(10.27)
(10.28)
(10.29)
(10.30)
(10.31)
(10.32)
(10.33)
(10.34)
(10.35)
(10.36)
(10.37)
(10.38)
输入迭代器，find和accumulate要求输入迭代器，istream_iterator是一种输入迭代器
输出迭代器，copy函数的第三个参数就是输出迭代器，ostream_iterator类型也是输出迭代器
前向迭代器，replace要求前向迭代器，forward_list上的迭代器是前向迭代器
双向迭代器，reverse要求双向迭代器，处理forward_list，其他标准库都提供符合双向迭代器要求的迭代器
随机访问迭代器，sort要求随机访问迭代器，array、deque、string和vector的迭代器都是随机访问迭代器，用于访问内置数组元素的指针也是。
(10.39)
list上的迭代器属于双向迭代器
vector上的迭代器属于随机访问迭代器
(10.40)
copy要求输出迭代器
reverse要求双向迭代器
unique要求前向迭代器
(10.41)
replace 把迭代器范围内的old_val替换成new_val
replace_if 把迭代器范围内使得pred为true的值替换成new_val
replace_copy 和 replace() 做的事是一样的，但它的结果会被保存到另一个序列中，而不会改变原始序列
replace_copy_if()，它和 replace_if() 算法是相同的，但它的结果会被保存到另一个序列中
(10.42)
