标准库特殊设施

tuple
是类似pair的模板，tuple可以有任意数量的成员
每个确定的tuple类型的成员数目是固定的，一个tuple类型的成员数目可以与另一个tuple类型不同
<tuple>
关系运算使用字典序
tuple<T1, T2, ..., Tn> t;
tuple<T1, T2, ..., Tn> t(v1, v2, ..., vn);函数是explicit的
make_tuple(v1, v2, ..., vn) 返回一个给定初始值初始化的tuple
get<i>(t) 返回t的第i个数据成员的引用
tuple_size<tupleType>::value 类模板，表示给定tuple类型中成员的数量
tuple_element<i, tupleType>::type 类模板，表示给定tuple类型中指定成员的类型
eg.
//定义并初始化
tuple<string, vector<double>, int, list<int>> someVal("constants", {3.14, 2.718}, 42, {0, 1, 2})
auto item = make_tuple("0-999-78345-X", 3, 20.00);
//访问成员
auto book = get<0>(item); //返回item的第一个成员
auto book = get<1>(item); //返回item的第二个成员
typedef declptype(item) trans; //trans是item的类型
size_t sz = tuple_size<trans>::value;//返回trans类型对象中成员的数量
tuple_element<1, trans>::type cnt = get<i>(item);//cnt是一个int,cnt的类型与item中第二个成员相同
//关系和相等运算符
只有当两个tuple具有相同数量，且成员使用运算符必须合法

bitset
将整型运算对象当作二进制位集合处理的一些内置运算符
bitset的低位在最右端
<bitset>
bitset<n> b;//b有n位，每一位均为0
bitset<n> b(u);//b是unsigned long long值u的低n位的拷贝
eg.
//定义并初始化
bitset<32> bitvec(1U);//32位，低位为1，其他位为0
//unsigned初始化bitset
bitset<13> bitvec1(0xbeef);//1111011101111
bitset<20> bitvec2(0xbeef);//00001011111011101111
bitset<128> bitvec3(~0ULL);//0~63为1;63~127为0
//string初始化bitset
bitset<32> bitvec4("1100");//2 3两位为1，剩余两位为0
string str("1111111000000011001101");
bitset<32> bitset5(str, 5, 4);//从str[5]开始的四个二进制位 1100
bitset<32> bitset6(str, str.size()-4);//使用最后四个字符 1101
//基本操作
b.any() b中是否存在置位的二进制位
b.all() b中所有位都置位了吗
b.none() b中不存在置位的二进制位吗
b.count() b中置位的位数
b.size() 返回b中的位数
b.test(pos) 若pos位置的位是置位的，返回true，否则返回false
b.set(pos, v) 将位置pos处的位设置为bool值v，v默认为true。如果未传递实参[b.set()]，则将b中所有为置位
b.reset(pos) 将位置pos处的位复位或将b中所有位复位[b.reset()]
b.flip(pos) 改变位置pos处的位的状态或改变b中每一位的状态[b.flip()]
b.to_ulong()
b.to_ullong()
b.to_string(zero, one)
os << b
is >> b

正则表达式
描述字符序列的方法
<regex>
regex 表示一个正则表达式的类
regex_match 将一个字符序列与一个正则表达式匹配
regex_search 寻找第一个与正则表达式匹配的子序列
regex_replace 使用定格式替换一个正则表达式
sregex_iterator 迭代器适配器，调用regex_search来遍历一个string中所有匹配的子串
smatch 容器类，保存在string中搜索的结果
ssub_match string中匹配的子表达式的结果
eg.
string pattern("[^c]ei");
//regex使用的正则表达式语言是ECMAScript，在ECMAScript中[[::alpha:]]能匹配任意字母
pattern = "[[:alpha:]]*" + pattern + "[[:alpha:]]*";
regex r(pattern);
smatch results;
string test_str("receipt freind theif receive");
if(regex_search(test_str, results, r))
    cout << results.str() << endl;

随机数
<random>
随机数引擎 生成随机unsigned整数序列
随机数分布类 使用引擎返回服从特定概率分布的随机数
eg.
uniform_int_distribution<unsigned> u(0, 9);//生成0到9之间（包含）均匀分布的随机数
default_random_engine e;//生成随机无符号数
u(e);//得到0到9的随机数
e.min();//1
e.max();//2147483646
/*
一个给定的随机数发生器一直会生成相同的随机数序列。
一个函数如果定义了局部的随机数发生器，应该将其引擎和分布对象定义为static的。
否则将会生成相同的序列
*/
//设置随机数发生器种子
default_random_engine e1(2147483646);
default_random_engine e2;
e2.seed(32767);
default_random_engine e3(time(0));//#include <ctime>
//生成随机实数
default_random_engine e;
uniform_real_distribution<double> u(0, 1);
u(e);
//生成非均匀分布的随机数
default_random_engine e;
normal_distribution<> n(4, 1.5);//均值4，标准差1.5
lround(n(e));//最接近的整数
//bernoulli_distribution类,总是返回一个bool值，返回true的概率是常数，默认值为0.5

操作符改变格式状态
//控制布尔值的格式
cout << boolalpha << true << false << noboolalpha;
//指定整型值的进制
cout << oct << ...  //八进制
cout << hex << ...  //十六进制
cout << dec << ...  //十进制，默认
//在输出中指出进制
cout << showbase;
...
cout << noshowbase;
//在输出中大写输出
cout << uppercase;
...
cout << nouppercase;
//指定打印精度
<iomanip>接受参数的操纵符
cout.precison();//返回当前精度值
//设置精度
cout.precison(12);
cout << setprecision(3);
//指定浮点数记数法
cout << scientific << ... //科学记数法
cout << fixed << ... //定点十进制
cout << hexfloat << ... //十六进制
cout << defaultfloat << ... //
//打印小数点
cout << showpoint;
...
cout << noshowpoint;
//输出补白
setw() 指定笑一个数字或字符串值的最小控件
left 左对齐
right 右对齐 默认
internal 左对齐符号，右对齐值，空格填满中间位置
setfill() 指定一个字符代替默认的空格补白
//控制输入格式
//输入运算符读取空白符
cin >> noskipws;
...
cin >> skipws;

//单字节操作
is.get(ch);从istream读取下一个字节存入字符ch中
os.put(ch);将字符ch输入到ostream
is.get();将is的下一个字节作为int返回
is.putback(ch);将字符ch放回is
is.unget();将is向后移动一个字节
is.peek();将下一个字节作为int返回，但不从流中删除它
//多字节操作
is.get(sink, size, delim)
读取最多size个字符保存在字符数组中，字符数组的起始地址有sink给出
读取过程遇到delim或者读取了size个字节或者文件尾停止
不读取delim，将其留在输入流中
is.getline(sink, size, delim)
与上面类似
但是会读取并丢弃delim
is.read(sink, size)
is.gcount();返回字节数
os.write(source, size);
is.ignore(size, delim);读取并忽略最多size个字符，包括delim

