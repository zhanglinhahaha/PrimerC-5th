运算符的重载
operator+ 重载运算符 +
operator- 重载运算符 -
...

如果类定义了调用运算符(operator())，则该类的对象称为函数对象
eg.
class PrintString {
public:
    PrintString(ostream &o, char c =' '):
        os(o), sep(c) { }
    void operator()(const string &s) const { os << s << sep; }
private:
    ostream &os;
    char sep;
};
PrintString printer;
printer(s);
PrintString errors(cerr, '\n');
errors(s);

lambda是函数对象
eg.
[](const string &a, const string &b) {return a.size() < b.size();};
其行为类似于
class ShorterString {
public:
    bool operator(){const string &s1, const string &s2) const {
        return s1.size() < s2.size();
    }
};

[sz](const string &a) {return a.size() >= sz;};
类似于
class SizeComp {
public:
    SizeComp(size_t n): sz(n) { }
    bool operator()(const string &s) const {
        return s.size() >= sz;
    }
private:
    size_t sz;
};

可调用的对象：函数、函数指针、lambda表达式、bind创建的对象、重载了函数调用运算符的类
可调用的对象也有类型
两个不同类型的可调用对象可能共享同一种调用形式，一种调用形式对应一个函数类型
eg.
函数类型: int(int, int) //接受两个int，返回一个int
可调用函数:
int add(int i, int j) {return i+j;}
auto mod = [](int i, int j) {return i % j;};
struct divide {
    int operator()(int i, int j) {
        return i / j;
    }
};

<functional>
function 是一个模板。
eg.
function<int(int, int)> f1 = add;
function<int(int, int)> f2 = divide();
function<int(int, int)> f3 = [](int i, int j) { return i * j;};

cout << f1(4,2) << endl;
cout << f2(4,2) << endl;
cout << f3(4,2) << endl;

map<string, function<int(int, int)>> binops = {
    {"+", add},
    {"-", std::minus<int>()},
    {"/", divide()},
    {"%", mod},
    {"*", [](int i, int j) { return i * j;} }
};
binops["+"](10, 5); //调用add(10, 5)

类型转换运算符
负责将一个类类型的值转换成其他类型
operator type() const;
eg.
class SmallInt {
public:
    SmallInt(int i = 0): val(i) {
        if(i < 0 || i > 255) {
            throw std::out_of_range("Bad SmallInt value");
        }
    operator int() const { return val; }
private:
    std::size_t val;
    }
};
显式的类型转换运算符
explicit operator int() const { return val; }


