6.1>
形参:出现在函数定义的地方,规定了该函数接受数据的类型
实参:出现在函数调用的地方,初始化函数的形参,数据类型需与形参一致
6.2>
a>
定义的函数返回类型(int)与实际上返回的类型(string)不一致
b>
缺少返回类型的定义,不带有返回类型的函数需定义为void
c>
形参的两个定义都是v1,二义性
花括号不匹配,缺少开始的花括号
d>
函数的定义需要花括号确保作用域

(6.16)
1>首先因为string容器已经存在一个empty()函数判断,显得多余
2>如果在函数中不对s进行操作,形参应该是常量引用
(6.18)
a>
bool compare(const matrix &, const matrix &) {/*...*/}
b>
vector<int>::iterator change_val (vector<int>::iterator , int) {/*...*/}
(6.19)
a>
calc函数在声明的时候只有一个形参,调用的时候却有两个实参
b>
合法
c>
合法
d>
合法
(6.20)
如果调用的实参不需要被修改的时候,尽可能的使用常量引用
不能在调用改函数的时候实参为一个常量

(6.50)
a>
不合法,会有二义性 void f(int, int) 和 void f(double, double = 3.14)
b>
合法,最佳匹配 void f(int)
c>
合法,最佳匹配 void f(int, int)
d>
合法,最佳匹配 void f(double, double = 3.14)

(6.52)
a>
类型提升
字符类型转换成int类型
a = 97;
z = 122;
b>
算术类型转换
double 转换成 int
